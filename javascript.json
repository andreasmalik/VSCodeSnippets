/*
	 // Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted.  
	 // Possible variables are:
	 // $1, $2 for tab stops, ${id} and ${id:label} and ${1:label} for variables. Variables with the same id are connected.
	 // Example:
	 "Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/

{
	
	/**
	 * JSDoc
	 **/
	"jsdocFileHeader": {
		"prefix": "jsdfile",
		"body": "/**\n * @file \t\t${1:description}\n * @author \t\t${2:name} <${3:email}>\n * @since \t\t${4:version}\n * @copyright \t${5:license}\n **/",
		"description": "JSDoc file header block"
	},
	"jsdocClass": {
		"prefix": "jsdclass",
		"body": "\n\n\n\n\n\n/**\n * ${1:description}\n * @extends \t${2:class}\n **/",
		"description": "JSDoc ES 2015 class block"
	},
	
	 
	
	/**
	 * Import
	 **/
	"import": {
		"prefix": "imp",
		"body": "import $1 from '${module}';\n$0",
		"description": "Imports entire module statement in ES6 syntax"
	},
	"importDestructing": {
		"prefix": "imd",
		"body": "import { $1 } from '${2:module}';\n$0",
		"description": "Imports only a portion of the module in ES6 syntax"
	},  
	"importEverything": {
		"prefix": "ime",
		"body": "import * as ${1:alias} from '${2:module}';\n$0",
		"description": "Imports everything as alias from the module in ES6 syntax"
	},  
	"importAs": {
		"prefix": "ima",
		"body": "import {${1:originalName} as ${2:alias} } from '${3:module}';\n$0",
		"description": "Imports a specific portion of the module by assigning a local alias in ES6 syntax"
	},  
	"exportNamedFunction": {
		"prefix": "enf",
		"body": "export const ${1:functionName} = ( ${2:params} ) =>  {\n\t$0\n};\n",
		"description": "Export named function in ES6 syntax"
	},
	
	/**
	 * Export
	 **/  
	"exportDefaultFunction": {
		"prefix": "edf",
		"body": "export default ( ${1:params} ) =>  {\n\t$0\n};\n",
		"description": "Export default function in ES6 syntax"
	},  
	"exportClass": {
		"prefix": "ecl",
		"body": "export default class ${1:className} {\n\n\t$0\n\n};\n",
		"description": "Export default class in ES6 syntax"
	},  
	"exportClassExtends": {
		"prefix": "ece",
		"body": "export default class ${1:className} extends ${2:baseclassName} {\n\t$0\n};\n",
		"description": "Export default class which extends a base one in ES6 syntax"
	},
	
	/**
	 * Classes and Objects
	 **/
	"constructor-method": {
		"prefix": "con",
		"body": "constructor( ${1:params} ) {\n\n\t${0}\n\n}\n",
		"description": "Add default constructor in a class in ES6 syntax"
	},
	"mehtod": {
		"prefix": "met",
		"body": "${1:methodName}( ${2:params} ) {\n\n\t${0}\n\n}\n",
		"description": "Creates a mehtod inside a class in ES6 syntax"
	},
	"propertyGet": {
		"prefix": "pge",
		"body": "get ${1:propertyName}() {\n\n\treturn this.${0};\n\n}\n",
		"description": "Creates a getter property inside a class in ES6 syntax"
	},
	"propertyset": {
		"prefix": "pse",
		"body": "set ${1:propertyName}( ${2:value} ) {\n\n\t${0};\n\n}\n",
		"description": "Creates a setter property inside a class in ES6 syntax"
	},
	
	/**
	 * Loops
	 **/
	"forEach": {
		"prefix": "fre",
		"body": "${1:array}.forEach( ${2:currentItem} => {\n\n\t${0}\n\n} );\n",
		"description": "Creates a forEach statement in ES6 syntax"
	},
	"forOf": {
		"prefix": "fof",
		"body": "for( let ${1:item} of ${2:object} ) {\n\n\t${0}\n\n}\n",
		"description": "Iterating over property names of iterable objects"
	},
	"forIn": {
		"prefix": "fin",
		"body": "for( let ${1:item} in ${2:object} ) {\n\n\t${0}\n\n}",
		"description": "Iterating over property values of iterable objects"
	},
	
	/**
	 * Functions
	 **/
	"anonymousFunction": {
		"prefix": "afn",
		"body": "( ${1:params} ) => {\n\n\t${2}\n\n}\n",
		"description": "Creates an anonymous function in ES6 syntax"
	},
	"namedFunction": {
		"prefix": "nfn",
		"body": "const ${1:name} = ( ${2:params} ) => {\n\n\t${3}\n\n}\n",
		"description": "Creates a named function in ES6 syntax"
	},
	
	/**
	 * Console
	 **/
	"consoleAssert": {
		"prefix": "cas",
		"body": "console.assert( ${1:expression}, ${2:object } );\n",
		"description": "If the specified expression is false, the message is written to the console along with a stack trace"
	},
	"consoleClear": {
		"prefix": "ccl",
		"body": "console.clear();",
		"description": "Clears the console"
	},
	"consoleCount": {
		"prefix": "cco",
		"body": "console.count( ${1:label} );",
		"description": "Writes the the number of times that count() has been invoked at the same line and with the same label"
	},
	"consoleDir": {
		"prefix": "cdi",
		"body": "console.dir( ${1:object} );",
		"description": "Prints a JavaScript representation of the specified object"
	},
	"consoleError": {
		"prefix": "cer",
		"body": "console.error( ${1:object} );",
		"description": "Displays a message in the console and also includes a stack trace from where the method was called"
	},
	"consoleLog": {
		"prefix": "clg",
		"body": "console.log( ${1:object} );",
		"description": "Displays a message in the console"
	},
	"consoleTrace": {
		"prefix": "ctr",
		"body": "console.trace( ${1:object} );",
		"description": "Prints a stack trace from the point where the method was called"
	},
	"consoleWarn": {
		"prefix": "cwa",
		"body": "console.warn( ${1:object} );",
		"description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
	},
	
	/**
	 * Misc
	 **/
	"destructingObject": {
		"prefix": "dob",
		"body": "const { ${1:propertyName} } = ${2:objectToDestruct};\n",
		"description": "Creates and assigns a local variable using object destructing"
	},
	"destructingArray": {
		"prefix": "dar",
		"body": "const [ ${1:propertyName} ] = ${2:arrayToDestruct};\n",
		"description": "Creates and assigns a local variable using array destructing"
	},
	"setInterval": {
		"prefix": "sti",
		"body": "setInterval( () => {\n\n\t${2}\n\n}, ${0:intervalInms} );\n",
		"description": "Executes the given function at specified intervals in ES6 syntax"
	},
	"setTimeOut": {
		"prefix": "sto",
		"body": "setTimeout( () => {\n\n\t${2}\n\n}, ${1:delayInms} );\n",
		"description": "Executes the given function after the specified delay in ES6 syntax"
	}
	
}